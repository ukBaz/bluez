#!/usr/bin/python3
# SPDX-License-Identifier: LGPL-2.1-or-later
import argparse
import sys
import bluezutils

from gi.repository import GLib


def _available_adapters():
    """Print the list of available adapters"""
    mngd_objs = bluezutils.get_managed_objects()
    print("\nAvailable values to use for adapter device:")
    print(f'{"D-Bus path":>20} | {"mac address"}')
    print(f'{"-" * 12:>21}|{"-" * 12}')
    for path, adapter in mngd_objs.items():
        address = adapter.get(bluezutils.ADAPTER_INTERFACE, {}).get("Address")
        if address:
            print(f"{path:>20} | {address}")


def directory(args):
    """If adapter device address pattern given, show available properties
    on adapter else show possible values for device address"""
    if args.device:
        try:
            adapter = bluezutils.find_adapter(args.device[0])
        except bluezutils.NoBluezAdapterFound as err:
            print("\n***Error:", err)
            adapter = None
        if adapter:
            _introspect = bluezutils.introspect(adapter.get_object_path())
            for prop in _introspect[bluezutils.ADAPTER_INTERFACE]["property"]:
                print(
                    f'\tProperty: {prop.get("name"):<20}  '
                    f'Type: {prop.get("type"):>3}  '
                    f'Access: {prop.get("access")}'
                )
            return

    _available_adapters()


def read(args):
    """Read a property on the adapter specified"""
    adapter_path = bluezutils.find_adapter(args.device).get_object_path()
    adapter_props = bluezutils.get_proxy(adapter_path, bluezutils.PROPERTIES_IACE)
    value = adapter_props.Get("(ss)", bluezutils.ADAPTER_INTERFACE, args.property)
    print(f"{args.property}: {value}")


def write(args):
    """Write to property on adapter"""
    adapter_path = bluezutils.find_adapter(args.device).get_object_path()
    adapter_props = bluezutils.get_proxy(adapter_path, bluezutils.PROPERTIES_IACE)
    _intro = bluezutils.introspect(adapter_path)
    (prop_type,) = [
        _["type"]
        for _ in _intro[bluezutils.ADAPTER_INTERFACE]["property"]
        if args.property in _.values()
    ]
    if prop_type == "b":  # Boolean value
        if args.value.casefold() == "true":
            value = GLib.Variant(prop_type, True)
        else:
            value = GLib.Variant(prop_type, False)
    elif prop_type == "u":  # 32-bit unsigned integer
        value = GLib.Variant(prop_type, int(args.property))
    elif prop_type == "s":  # UTF-8 string
        value = GLib.Variant(prop_type, args.property)

    adapter_props.Set("(ssv)", bluezutils.ADAPTER_INTERFACE, args.property, value)


def parse_args(sys_args):
    """Parse command line options given"""
    # create the top-level parser
    parser = argparse.ArgumentParser(
        prog=sys_args[0], description="Test properties on adapter"
    )
    subparsers = parser.add_subparsers(help="sub-command -h to get more help")

    # create the parser for the "list" command
    parser_list = subparsers.add_parser(
        "list",
        help=(
            "List properties on the adapter. "
            "Will list available adapters if adapter device not specified"
        ),
    )
    parser_list.add_argument(
        "device", nargs="*", help="mac address or end of D-Bus path"
    )
    parser_list.set_defaults(func=directory)

    # create the parser for the "read" command
    parser_read = subparsers.add_parser("read", help="Read adapter properties")
    parser_read.add_argument("device", help="mac address or end of D-Bus path")
    parser_read.add_argument("property", help="Adapter property to read")
    parser_read.set_defaults(func=read)

    # create the parser for the "write" command
    parser_write = subparsers.add_parser("write", help="Write adapter properties")
    parser_write.add_argument("device", help="mac address or end of D-Bus path")
    parser_write.add_argument("property", help="Adapter property to write to")
    parser_write.add_argument("value", help="Value to write to adapter property")
    parser_write.set_defaults(func=write)

    return parser.parse_args(sys_args[1:])


if __name__ == "__main__":
    # cmd = 'test-adapter write --device hci0 --property Pairable --value False'
    # args = parse_args(cmd.split())
    cmd_args = parse_args(sys.argv)
    if "func" not in cmd_args:
        parse_args(["sys.argv", "-h"])
    cmd_args.func(cmd_args)
